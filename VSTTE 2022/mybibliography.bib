


@misc{HornGraph,
    title={Exploring Representation of Horn Clauses using GNNs},
    author={Chencheng Liang and Philipp R{\"u}mmer and Marc Brockschmidt},
    year={2022},
}


@Article{Leroux2016,
author="Leroux, J{\'e}r{\^o}me
and R{\"u}mmer, Philipp
and Suboti{\'{c}}, Pavle",
title="Guiding {Craig} interpolation with domain-specific abstractions",
journal="Acta Informatica",
year="2016",
month="Jun",
day="01",
volume="53",
number="4",
pages="387--424",
abstract="Craig interpolation is a standard method to construct and refine abstractions in model checking. To obtain abstractions that are suitable for the verification of software programs or hardware designs, model checkers rely on theorem provers to find the right interpolants, or interpolants containing the right predicates, in a generally infinite lattice of interpolants for any given interpolation problem. We present a semantic and solver-independent framework for systematically exploring interpolant lattices, based on the notion of interpolation abstraction. We discuss how interpolation abstractions can be constructed for a variety of logics, and how they can be applied in the context of software model checking.",
issn="1432-0525",
doi="10.1007/s00236-015-0236-z",
url="https://doi.org/10.1007/s00236-015-0236-z"
}


@InProceedings{10.1007/978-3-319-57288-8_18,
author="Demyanova, Yulia
and R{\"u}mmer, Philipp
and Zuleger, Florian",
editor="Barrett, Clark
and Davies, Misty
and Kahsai, Temesghen",
title="Systematic Predicate Abstraction Using Variable Roles",
booktitle="NASA Formal Methods",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="265--281",
abstract="Heuristics for discovering predicates for abstraction are an essential part of software model checkers. Picking the right predicates affects the runtime of a model checker, or determines if a model checker is able to solve a verification task at all. In this paper we present a method to systematically specify heuristics for generating program-specific abstractions. The heuristics can be used to generate initial abstractions, and to guide abstraction refinement through templates provided for Craig interpolation. We describe the heuristics using variable roles, which allow us to pick domain-specific predicates according to the program under analysis. Variable roles identify typical variable usage patterns and can be computed using lightweight static analysis, for instance with the help of off-the-shelf logical programming engines. We implemented a prototype tool which extracts initial predicates and templates for C programs and passes them to the Eldarica model checker in the form of source code annotations. For evaluation, we defined a set of heuristics, motivated by Eldarica's previous built-in heuristics and typical verification benchmarks from the literature and SV-COMP. We evaluate our approach on a set of more than 500 programs, and observe an overall increase in the number of solved tasks by 11.2{\%}, and significant speedup on certain benchmark families.",
isbn="978-3-319-57288-8"
}

@misc{chcBenchmark,
    title={Competition Report: {CHC-COMP-21}},
    author={Grigory Fedyukovich and Philipp R{\"u}mmer},
    year={2021},
    url       = {https://chc-comp.github.io/2021/report.pdf}
}

@INPROCEEDINGS{8603013,  author={H. {Hojjat} and P. {Ruemmer}},  booktitle={2018 Formal Methods in Computer Aided Design (FMCAD)},   title={The {ELDARICA} {Horn} Solver},   year={2018},  volume={},  number={},  pages={1-7},  doi={10.23919/FMCAD.2018.8603013}}

@misc{ruemmer2013disjunctive,
      title={Disjunctive Interpolants for {Horn-clause} Verification (Extended Technical Report)},
      author={Philipp R{\"u}mmer and Hossein Hojjat and Viktor Kuncak},
      year={2013},
      eprint={1301.4973},
      archivePrefix={arXiv},
      primaryClass={cs.LO}
}